<?xml version="1.0" encoding="UTF-8"?>

<language id="crunch" _name="Crunch" version="2.0" _section="Source">
  <metadata>
    <property name="globs">*.crunch</property>
    <property name="line-comment-start">::</property>
  </metadata>

  <styles>
    <style id="comment" _name="Comment" map-to="def:comment"/>
    <style id="string" _name="String" map-to="def:string"/>
    <style id="char" _name="Character" map-to="def:character"/>
    <style id="keyword" _name="Keyword" map-to="def:keyword"/>
    <style id="type" _name="Data Type" map-to="def:type"/>
    <style id="boolean" _name="Boolean value" map-to="def:boolean"/>
    <style id="identifier" _name="Identifier" map-to="def:identifier"/>
    <style id="number" _name="Number" map-to="def:number"/>
    <style id="scope" _name="Scope" map-to="def:preprocessor"/>
    <style id="attribute" _name="Attribute" map-to="def:preprocessor"/>
    <style id="macro" _name="Macro" map-to="def:preprocessor"/>
  </styles>

  <definitions>
    <context id="keywords" style-ref="keyword">
      <keyword>as</keyword>
      <keyword>break</keyword>
      <keyword>continue</keyword>
      <keyword>else</keyword>
      <keyword>empty</keyword>
      <keyword>end</keyword>
      <keyword>enum</keyword>
      <keyword>exposed</keyword>
      <keyword>exposing</keyword>
      <keyword>fn</keyword>
      <keyword>for</keyword>
      <keyword>if</keyword>
      <keyword>import</keyword>
      <keyword>in</keyword>
      <keyword>let</keyword>
      <keyword>loop</keyword>
      <keyword>match</keyword>
      <keyword>pkg</keyword>
      <keyword>return</keyword>
      <keyword>then</keyword>
      <keyword>trait</keyword>
      <keyword>type</keyword>
      <keyword>where</keyword>
      <keyword>while</keyword>
    </context>
    
    <!--
    <context id="reserved" style-ref="def:reserved">
    </context>
    -->

    <context id="types" style-ref="type">
      <match extended="true">
        \b(bool|unit|int|float|str)\b
      </match>
    </context>

    <context id="self" style-ref="identifier">
      <keyword>self</keyword>
    </context>

    <context id="boolean" style-ref="boolean">
      <keyword>true</keyword>
      <keyword>false</keyword>
    </context>

    <define-regex id="hex-digit" extended="true">
      [0-9a-fA-F]
    </define-regex>

    <define-regex id="oct-digit" extended="true">
      [0-7]
    </define-regex>

    <context id="number" style-ref="number">
      <match extended="true">
        ((?&lt;=\.\.)|(?&lt;![\w\.]))
        (
        [1-9][0-9_]*|
        0[0-9_]*|
        0b[01_]+|
        0o(\%{oct-digit}|_)+|
        0x(\%{hex-digit}|_)+
        )
        ((?![\w\.].)|(?=\.\.))
      </match>
    </context>

    <define-regex id="ident" extended="true">
      ([^[:cntrl:][:space:][:punct:][:digit:]]|_)([^[:cntrl:][:punct:][:space:]]|_)*
    </define-regex>

    <define-regex id="common-escape" extended="true">
      '|"|
      \\|n|r|t|0|
      x\%{hex-digit}{2}
    </define-regex>

    <define-regex id="unicode-escape" extended="true">
      u{\%{hex-digit}{1,6}}
    </define-regex>

    <context id="string-escape" style-ref="def:special-char">
      <match>\\\%{common-escape}|\\\%{unicode-escape}</match>
    </context>

    <context id="byte-string-escape" style-ref="def:special-char">
      <match>\\\%{common-escape}</match>
    </context>

    <context id="raw-string" style-ref="string" class="string" class-disabled="no-spell-check">
      <start>b?r(#*)"</start>
      <end>"\%{1@start}</end>
      <include>
        <context ref="def:line-continue"/>
      </include>
    </context>

    <context id="string" style-ref="string" class="string" class-disabled="no-spell-check">
      <start>"</start>
      <end>"</end>
      <include>
        <context ref="string-escape"/>
        <context ref="def:line-continue"/>
      </include>
    </context>

    <context id="byte-string" style-ref="string" class="string" class-disabled="no-spell-check">
      <start>b"</start>
      <end>"</end>
      <include>
        <context ref="byte-string-escape"/>
        <context ref="def:line-continue"/>
      </include>
    </context>

    <context id="char" style-ref="char">
      <match extended="true">'([^\\']|\\\%{common-escape}|\\\%{unicode-escape})'</match>
    </context>

    <context id="byte" style-ref="char">
      <match extended="true">b'([^\\']|\\\%{common-escape})'</match>
    </context>

    <context id="attribute" style-ref="attribute" class="attribute">
      <match>@\%{ident}(\(\%{ident}+\))?</match>
    </context>
    
    <context id="line-comment" style-ref="comment" end-at-line-end="true" class-disabled="no-spell-check" class="comment">
      <start>::</start>
      <include>
        <context ref="def:in-comment"/>
      </include>
    </context>

    <context id="line-doc-comment" style-ref="def:doc-comment" end-at-line-end="true" class="comment" class-disabled="no-spell-check">
      <start>:::</start>
    </context>

    <context id="crunch" class="no-spell-check">
      <include>
      	<context ref="line-comment"/>
      	<context ref="line-doc-comment"/>
        <context ref="keywords"/>
        <context ref="reserved"/>
        <context ref="types"/>
        <context ref="boolean"/>
        <context ref="number"/>
        <context ref="string"/>
        <context ref="self"/>
        <context ref="char"/>
        <context ref="attribute"/>
        <!--
        <context ref="byte-string"/>
        <context ref="raw-string"/>
        <context ref="byte"/>
        <context ref="lifetime"/>
        -->
      </include>
    </context>

  </definitions>

</language>
